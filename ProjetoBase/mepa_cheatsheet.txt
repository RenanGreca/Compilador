A MEPA (Máquina de Execução de Pascal) é uma linguagem intermediária que simplifica a geração de código.
- Máquina que usa uma pilha para cálculos (como na notação posfixa: abc+- e demais operações).
- Memória (M)
- Registradores de base (D)
- Contador de instruções (i) (i:=i+1 aparece em toda instrução exceto quando explicitado)
- Apontador da pilha (s) (stack pointer).

## Geral ##
INPP        inicia programa
            s:=-1; 
            D[0]:=0;
PARA        termina programa
AMEM m      aloca m espaços na memória
            s:=s+m;
DMEM m      dealoca m espaços
            s:=s-m;
NADA        nada
LEIT        lê uma variável
IMPR x      imprime x

## Valores ##
ARMZ k,n    armazena valor na variável de endereço k,n
            M[D[k]+n]:=M[s];
            s:=s-1;
CRVL k,n    carrega o valor da variável no end. k,n
            s:=s+1; 
            M[s]:=M[D[k]+n];
CRCT k      carrega a constante k
            s:=s+1;
            M[s]:=k;
# Indiretos #
CREN k,n    carrega o endereço de k,n
            s:=s+1;
            M[s]:=D[k]+n];
CRVI k,n    carrega o valor do endereço apontado por k,n
            M[M[D[k]+n]]:=M[s];
            s:=s+1;
ARMI k,n    armazena valor no endereço apontado por k,n
            M[s]:=M[M[D[k]+n]];
            i:=M[s-2];

## Operações ##
SOMA        adição dos dois itens no topo da pilha
            M[s-1]:=M[s-1]+M[s]; (semelhante para as outras operações)
            s:=s-1;
SUBT        subtração
MULT        multiplicação
DIVI        divisão
CONJ        conjunção (and)
DISJ        disjunção (or)

## Comparações ##
CMIG        compara igual
            M[s-1]:=(M[s-1]==M[s]); (semelhante para outras comparações)
            s:s-1;
CMDG        compara diferente
CMME        compara menor
CMMA        compara maior
CMEG        compara menor-igual
CMAG        compara maior-igual

## Controle de fluxo ##
DSVS p      desvia sempre para o rótulo p
            i:=p
DSVF p      desvia se falso
            Se (M[s]==0) então i:=p;
                         senão i:=i+1;
            s:=s-1;
DSVR p,j,k  desvia para o rótulo p, nível léxico destino j, nível léxico atual k
            temp1:=k;
            enquanto temp1 != j
                temp2:=M[D[temp1]-2];
                D[temp1]:=M[D[temp1]-1];
                temp1:=temp2; 
ENRT k,n    entra no rótulo dentro no nível léxico k num procedimento com n variáveis locais
            s:=D[j]+n-1;

## Prodecimentos ##
CHPR p,k    chama procedimento no rótulo p, nível léxico atual k
            M[s+1]:=i+1;
            M[s+2]:=k;
            s:=s+2;
            i:=p;
ENPR k      entra em procedimento de nível léxico k
            s:=s+1;
            M[s]:=D[k];
            D[k]:=s+1;
RTPR k,n    retorna procedimento nível léxico k, n parâmetros a desempilhar
            D[k]:=M[s];
            i:=M[s-2];
            s:=s-(n+3);